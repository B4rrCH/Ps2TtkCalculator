@using CurvePoint = System.Tuple<double, double>

@page "/"

<MudGrid Spacing="2" Justify="Justify.Center">
    <MudItem xs="12">
        <LoadoutsSelector Player1=@Player1 Player2=@Player2 @ref=@Selector PropertiesChanged="@OnPropertiesChanged" />
    </MudItem>
    <MudItem xs="12">
        <TtkGraph Curve1="@Density1" Curve2="Density2" WinProbabilities="@WinProbabilities" />
    </MudItem>
</MudGrid>
@code {

    public Player Player1 { get; set; } = new();
    public Player Player2 { get; set; } = new();
    public int Range => Selector.Range;
    private LoadoutsSelector Selector { get; set; }
    public IEnumerable<CurvePoint> Density1 { get; set; }
    public IEnumerable<CurvePoint> Density2 { get; set; }
    public WinProbabilities WinProbabilities { get; set; }
    private System.Timers.Timer CurveRefreshDebounce;

    protected override async Task OnInitializedAsync()
    {
        CurveRefreshDebounce = new()
        {
            AutoReset = false,
            Interval = 200,
            Enabled = false
        };
        CurveRefreshDebounce.Elapsed += (s, e) => { _ = RefreshCurve(); };
        await base.OnInitializedAsync();
    }


    private void OnPropertiesChanged()
    {
        CurveRefreshDebounce?.Stop();
        CurveRefreshDebounce?.Start();
    }

    private async Task RefreshCurve()
    {
        var curveCalculator1 = new TtkCurveCalculator(Player1.Weapon, Player1.Shooter, Player2.Target, Range);
        var cummulativeDistribution1 = await curveCalculator1.GetCumulativeDistribution();
        Density1 = await curveCalculator1.GetCurve();

        var curveCalculator2 = new TtkCurveCalculator(Player2.Weapon, Player2.Shooter, Player1.Target, Range);
        var cummulativeDistribution2 = await curveCalculator2.GetCumulativeDistribution();
        Density2 = await curveCalculator2.GetCurve();

        WinProbabilities = WinProbabilityCalculator.GetProbabilites(Density1, cummulativeDistribution1,
                                                                    Density2, cummulativeDistribution2);

        StateHasChanged();
    }

}