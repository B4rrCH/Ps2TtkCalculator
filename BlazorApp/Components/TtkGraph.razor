@using CurvePoint = System.Tuple<double, double>
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.ScatterChart
@using Newtonsoft.Json.Linq;

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h4">Probabilities</MudText>
    </MudCardHeader>
    <MudCardContent>
        <div style="width: 99%">
            <Chart Config="_config" />
        </div>
        @if (WinProbabilities != null)
        {
            <MudSimpleTable Dense="true" Outlined="true" Striped="true">
                <thead>
                    <tr>
                        <th>Outcome</th>
                        <th>Probability</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Player 1 wins</td>
                        <td>@($"{WinProbabilities.Player1Wins:P1}")</td>
                    </tr>
                    <tr>
                        <td>Player 2 wins</td>
                        <td>@($"{WinProbabilities.Player2Wins:P1}")</td>
                    </tr>
                    <tr>
                        <td>Kill trade</td>
                        <td>@($"{WinProbabilities.Trade:P1}")</td>
                    </tr>
                    <tr>
                        <td>Draw (Both players run out of ammo)</td>
                        <td>@($"{WinProbabilities.Draw:P1}")</td>
                    </tr>
                </tbody>
            </MudSimpleTable>
        }
    </MudCardContent>
</MudCard>

@code {
    private IEnumerable<CurvePoint> curve1;
    private IEnumerable<CurvePoint> curve2;

    private IDataset<Point> dataset1;
    private IDataset<Point> dataset2;

    [Parameter]
    public IEnumerable<CurvePoint> Curve1
    {
        get => curve1;
        set
        {
            curve1 = value;
            dataset1 ??= new LineDataset<Point>()
            {
                Label = "Player 1",
                BorderColor = "blue",
                LineTension = 0
            };
            if (value != null)
            {
                dataset1.Clear();
                foreach (var timePoint in value)
                {
                    dataset1.Add(new Point(timePoint.Item1, timePoint.Item2));
                }
            }
        }
    }

    [Parameter]
    public IEnumerable<CurvePoint> Curve2
    {
        get => curve2;
        set
        {
            curve2 = value;
            dataset2 ??= new LineDataset<Point>()
            {
                Label = "Player 2",
                BorderColor = "skyblue",
                LineTension = 0
            };
            if (value != null)
            {
                dataset2.Clear();
                foreach (var timePoint in value)
                {
                    dataset2.Add(new Point(timePoint.Item1, timePoint.Item2));
                }
            }
        }
    }

    [Parameter]
    public WinProbabilities WinProbabilities { get; set; }

    private ScatterConfig _config;

    protected override void OnInitialized()
    {
        _config = new ScatterConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Time (s)",
                            Display = true
                        },
                        Display = AxisDisplay.True,
                    },
                },
                    YAxes = new List<CartesianAxis>
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Probability of kill at time after first shot",
                            Display = true
                        },
                        Display = AxisDisplay.True,
                    }
                }
                },
            }
        };
        _config.Data.Datasets.Add(dataset1);
        _config.Data.Datasets.Add(dataset2);
        base.OnInitialized();
    }
}