@using System.ComponentModel
@using Ps2TtkCalculator.Shared.ExtensionMethods

@if (Target != null)
{
    <MudItem xs="6">
        <MudSelect T="@HealthType" @bind-Value="@Health" Label="HP Pool">
            @foreach (var healthType in Enum.GetValues<HealthType>())
            {
                <MudSelectItem Value="@healthType">@EnumExtensions.GetDescription(healthType)</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <MudSelect T="@ResistanceType" @bind-Value="@ResistanceType" Label="Resistance type">
            @foreach (var resistanceType in Enum.GetValues<ResistanceType>())
            {
                <MudSelectItem Value="@resistanceType">@EnumExtensions.GetDescription(resistanceType)</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
}

@code {
    private HealthType health;
    private HealthType Health
    {
        get => health;
        set
        {
            health = value;
            Target.MaxHealthPoints = Health switch
            {
                HealthType.Normal => 1000,
                HealthType.NanomeshGenerator => 1425,
                HealthType.Infiltrator => 900,
                _ => throw new ArgumentException(nameof(Health))
            };
        }
    }

    private ResistanceType resistanceType;
    private ResistanceType ResistanceType
    {
        get => resistanceType;
        set
        {
            resistanceType = value;
            Target.ResistanceBodyshot = ResistanceType switch
            {
                ResistanceType.Normal => 0.0,
                ResistanceType.NanoWeaveArmor => 0.2,
                ResistanceType.Symbiote => 0.2,
                ResistanceType.ReistShield => 0.35,
                _ => throw new ArgumentException(nameof(resistanceType))
            };

            Target.ResistanceHeadshot = ResistanceType switch
            {
                ResistanceType.Normal => 0.0,
                ResistanceType.NanoWeaveArmor => 0.0,
                ResistanceType.Symbiote => 0.2,
                ResistanceType.ReistShield => 0.35,
                _ => throw new ArgumentException(nameof(resistanceType))
            };
        }
    }

    [Parameter]
    public Target Target { get; set; }
}

