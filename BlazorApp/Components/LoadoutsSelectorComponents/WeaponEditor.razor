@using MudBlazor
@using Ps2TtkCalculator.Shared.Dto

@inject Radzen.DialogService dialogService
@inject HttpClient httpClient

@if (Weapon != null)
{
    <tr>
        <th colspan="2">
            <MudTooltip Text="Change">
                <MudButton OnClick="@AskUserForWeapon" Variant="MudBlazor.Variant.Filled">@Weapon.Name</MudButton>
            </MudTooltip>
        </th>
    </tr>
    <tr>
        <td colspan="2">
            @if (Weapon.ImagePath != null)
            {
                <img src="@(censusBaseUri + Weapon.ImagePath)" />
            }
            else
            {
                <img src="@(censusBaseUri + defaultImagePath)" />
            }
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <MudNumericField @bind-Value=@Weapon.HeadshotMultiplier
                             Format="0.00"
                             Step="0.5"
                             TextChanged="@((args) => OnChange())"
                             Label="Headshot Multiplier" />
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <MudNumericField @bind-Value=@Weapon.MagazineSize
                             Format="0"
                             Step="5"
                             TextChanged="@((args) => OnChange())"
                             Label="Magazine size" />
        </td>
    </tr>
    <tr style="margin-top: 1rem">
        <td colspan="2">
            <MudNumericField @bind-Value=@Weapon.RefireTime_ms
                             Format="0"
                             Min="1"
                             Step="5"
                             TextChanged="@((args) => OnChange())"
                             Label="Refire Time"
                             HelperText="@($"RPM = {60000 / Weapon.RefireTime_ms}")"
                             AdornmentText="ms"
                             Adornment="MudBlazor.Adornment.End" />
        </td>
    </tr>
    <tr style="margin-top: 1rem">
        <td colspan="2">
            <MudNumericField @bind-Value=@Weapon.MuzzleVelocity_mps
                             Min="0"
                             Format="0"
                             Step="5"
                             TextChanged="@((args) => OnChange())"
                             Label="Muzzle Velocity"
                             AdornmentText="m/s"
                             Adornment="MudBlazor.Adornment.End" />
        </td>
    </tr>
    <tr style="margin-top: 1rem">
        <td>
            <MudNumericField @bind-Value=@Weapon.DamageModel.MaxDamage
                             Format="0"
                             Step="5"
                             TextChanged="@((args) => OnChange())"
                             Label="Maximum Damage" />
        </td>
        <td>
            <MudNumericField @bind-Value=@Weapon.DamageModel.MaxDamageRange_m
                             Format="0"
                             Step="5"
                             TextChanged="@((args) => OnChange())"
                             Label="Maximum Damage Range"
                             AdornmentText="m"
                             Adornment="MudBlazor.Adornment.End" />
        </td>
    </tr>
    <tr style="margin-top: 1rem">
        <td>
            <MudNumericField @bind-Value=@Weapon.DamageModel.MinDamage
                             Format="0"
                             Step="5"
                             TextChanged="@((args) => OnChange())"
                             Label="Minimum Damage" />
        </td>
        <td>
            <MudNumericField @bind-Value=@Weapon.DamageModel.MinDamageRange_m
                             Format="0"
                             Step="5"
                             TextChanged="@((args) => OnChange())"
                             Label="Minimum Damage Range"
                             AdornmentText="m"
                             Adornment="MudBlazor.Adornment.End" />
        </td>
    </tr>
}

@code {
    [Parameter]
    public Weapon Weapon { get; set; }

    private const string censusBaseUri = "https://census.daybreakgames.com";
    private const string defaultImagePath = "/files/ps2/images/static/3655.png";

    protected override async Task OnInitializedAsync()
    {
        const int orionItemId = 80;
        await SetWeaponFromCensus(orionItemId);
        await base.OnInitializedAsync();
    }

    private async Task AskUserForWeapon()
    {
        int? ItemId = await dialogService.OpenAsync<WeaponSelector>("Choose a weapon",
                                                                    options: new Radzen.DialogOptions() { Width = "90%" });
        if (ItemId is int itemId)
        {
            await SetWeaponFromCensus(itemId);
        }
    }

    private async Task SetWeaponFromCensus(int itemId)
    {
        var weaponRequestUri = QueryUris.GetWeaponFullRequestUri(itemId);
        var itemList = await httpClient.GetFromJsonAsync<ItemList>(weaponRequestUri);
        var item = itemList.Items.FirstOrDefault();
        var tmp = Weapon.FromItem(item);

        if (tmp != null)
        {
            Weapon.DamageModel = tmp.DamageModel;
            Weapon.Faction = tmp.Faction;
            Weapon.HeadshotMultiplier = tmp.HeadshotMultiplier;
            Weapon.ImagePath = tmp.ImagePath;
            Weapon.MagazineSize = tmp.MagazineSize;
            Weapon.MuzzleVelocity_mps = tmp.MuzzleVelocity_mps;
            Weapon.Name = tmp.Name;
            Weapon.RefireTime_ms = tmp.RefireTime_ms;
            Weapon.WeaponCategory = tmp.WeaponCategory;
        }

    }

    private void OnChange()
    {
        Weapon.Name = "Custom Weapon";
        Weapon.ImagePath = null;
    }
}