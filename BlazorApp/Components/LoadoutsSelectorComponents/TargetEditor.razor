@using System.ComponentModel
@using Ps2TtkCalculator.Shared.ExtensionMethods
@using MudBlazor

@if (Target != null)
{
    <MudItem xs="6">
        <MudSelect T="@HealthType" @bind-Value="@Health" Label="HP Pool">
            @foreach (var healthType in Enum.GetValues<HealthType>())
            {
                <MudSelectItem Value="@healthType">@healthType.GetDescription()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <MudSelect T="@ResistanceType" @bind-Value="@Resistance" Label="Resistance type">
            @foreach (var resistanceType in Enum.GetValues<ResistanceType>())
            {
                <MudSelectItem Value="@resistanceType">@resistanceType.GetDescription()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
}

@code {
    enum HealthType
    {
        [Description("Normal (1000)")]
        Normal,
        [Description("NMG/Adren Shield (1450)")]
        NanomeshGenerator,
        [Description("Infiltrator (900)")]
        Infiltrator
    }

    enum ResistanceType
    {
        [Description("Normal (0%)")]
        Normal,
        [Description("Nanoweave Armor (20% body-only)")]
        NanoWeaveArmor,
        [Description("Symbiote (20%)")]
        Symbiote,
        [Description("ResistShield (35%)")]
        ReistShield
    }

    private HealthType health;
    private HealthType Health
    {
        get => health;
        set
        {
            health = value;
            Target.MaxHp = Health switch
            {
                HealthType.Normal => 1000,
                HealthType.NanomeshGenerator => 1450,
                HealthType.Infiltrator => 900,
                _ => throw new ArgumentException(nameof(Health))
            };
        }
    }

    private ResistanceType resistance;
    private ResistanceType Resistance
    {
        get => resistance;
        set
        {
            resistance = value;
            Target.ResistanceBodyshot = Resistance switch
            {
                ResistanceType.Normal => 0.0,
                ResistanceType.NanoWeaveArmor => 0.2,
                ResistanceType.Symbiote => 0.2,
                ResistanceType.ReistShield => 0.35,
                _ => throw new ArgumentException(nameof(Resistance))
            };

            Target.ResistanceHeadshot = Resistance switch
            {
                ResistanceType.Normal => 0.0,
                ResistanceType.NanoWeaveArmor => 0.0,
                ResistanceType.Symbiote => 0.2,
                ResistanceType.ReistShield => 0.35,
                _ => throw new ArgumentException(nameof(Resistance))
            };
        }
    }

    [Parameter]
    public Target Target { get; set; }

    private static string GetDescription(Enum value)
    {
        Type type = value.GetType();
        string name = Enum.GetName(type, value);
        if (name != null)
        {
            System.Reflection.FieldInfo field = type.GetField(name);
            if (field != null)
            {
                DescriptionAttribute attr =
                       Attribute.GetCustomAttribute(field,
                         typeof(DescriptionAttribute)) as DescriptionAttribute;
                if (attr != null)
                {
                    return attr.Description;
                }
            }
        }
        return null;
    }
}

