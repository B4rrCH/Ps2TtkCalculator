@using CurvePoint = System.Tuple<int, double>
@using MudBlazor

@if (Player1 != null && Player2 != null)
{
    <MudCard>
        <RadzenPanel AllowCollapse="true" Style="">
            <HeaderTemplate>
                <h2>Loadouts Selection</h2>
            </HeaderTemplate>
            <ChildContent>
                <div class="table-responsive-xl">
                    <table style="width:95%">
                        <tr>
                            <td>
                                <MudCard>
                                    <MudCardContent>
                                        <h2 style="text-align: center">Player 1</h2>
                                        <table style="width: 100%">
                                            <WeaponEditor Weapon="@Player1.Weapon" />
                                            <TargetEditor Target="@Player1.Target" />
                                            <AccuracyAndHeadshotEditor Shooter=@Player1.Shooter />
                                        </table>
                                    </MudCardContent>
                                </MudCard>
                            </td>
                            <td>
                                <MudCard>
                                    <MudCardContent>
                                        <h2 style="text-align: center">Player 2</h2>
                                        <table style="width: 100% ">
                                            <WeaponEditor Weapon="@Player2.Weapon" />
                                            <TargetEditor Target="@Player2.Target" />
                                            <AccuracyAndHeadshotEditor Shooter=@Player2.Shooter />
                                        </table>
                                    </MudCardContent>
                                </MudCard>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <MudSlider @bind-Value=@Range Min="0" Max="400" Step="1" Label>
                                    <MudNumericField @bind-Value=@Range
                                                     Format="0"
                                                     Step="10"
                                                     Label="Range"
                                                     Min="0"
                                                     Max="400"
                                                     AdornmentText="m"
                                                     Adornment="MudBlazor.Adornment.End" />
                                </MudSlider>
                            </td>
                        </tr>
                    </table>
                </div>
            </ChildContent>
        </RadzenPanel>
    </MudCard>
}

@code {
    private int range;
    private Player player1;
    private Player player2;

    [Parameter]
    public Player Player1
    {
        get => player1;
        set
        {
            if (player1 != value)
            {
                player1 = value;
                PropertiesChanged.InvokeAsync();
            }
        }
    }
    [Parameter]
    public Player Player2
    {
        get => player2;
        set
        {
            if (player2 != value)
            {
                player2 = value;
                PropertiesChanged.InvokeAsync();
            }
        }
    }

    [Parameter]
    public int Range
    {
        get => range;
        set
        {
            if (range != value)
            {
                range = value;
                PropertiesChanged.InvokeAsync();
            }
        }
    }
    [Parameter]
    public EventCallback PropertiesChanged { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (Player1 != null)
            Player1.PropertiesChanged = this.PropertiesChanged;
        if (Player2 != null)
            Player2.PropertiesChanged = this.PropertiesChanged;
        return base.OnInitializedAsync();
    }
}